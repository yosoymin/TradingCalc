{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Chart","props","ref","React","createRef","state","data","binance","Binance","closeWS","ws","ticker","console","log","setState","lineSeries","chart","createChart","this","current","width","height","addLineSeries","setData","time","value","prevProps","prevState","lineData","key","push","eventTime","parseFloat","curDayClose","Component","App","apiKeyValue","apiSecretValue","handleChangeAPIKey","bind","handleChangeAPISecret","handleRun","event","target","candles","candle","className","name","type","onChange","onClick","symbol","interval","timezone","style","locale","toolbar_bg","enable_publishing","withdateranges","hide_side_toolbar","allow_symbol_change","theme","Themes","DARK","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbe58132.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//import React, { useEffect, useState } from 'react';\nimport React from 'react';\nimport logo from './logo.svg';\nimport { createChart } from 'lightweight-charts';\nimport TradingViewWidget, { Themes } from 'react-tradingview-widget';\nimport Binance from 'binance-api-node';\nimport './App.css';\n\n/*function Chart() {\n  const ref = React.useRef();\n  const [data, setData] = useState([]);\n  const binance = Binance();\n  const closeWS = binance.ws.candles('ADAEUR', '1m', candle => {\n    console.log(candle);\n    setData(data.concat(candle));\n  });\n\n  useEffect(() => {\n    const chart = createChart(ref.current, { width: 400, height: 300 });\n    const lineSeries = chart.addLineSeries();\n    lineSeries.setData([\n      { time: '2019-04-11', value: 80.01 },\n      { time: '2019-04-12', value: 96.63 },\n      { time: '2019-04-13', value: 76.64 },\n      { time: '2019-04-14', value: 81.89 },\n      { time: '2019-04-15', value: 74.43 },\n      { time: '2019-04-16', value: 80.01 },\n      { time: '2019-04-17', value: 96.63 },\n      { time: '2019-04-18', value: 76.64 },\n      { time: '2019-04-19', value: 81.89 },\n      { time: '2019-04-20', value: 74.43 },\n    ]);\n    return closeWS;   // devolvemos funcion de saneamiento\n  }, [data]);\n\n  return (\n    <>\n      <div ref={ref} />\n    </>\n  );\n}*/\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      data: []\n    }\n    this.binance = Binance();\n    this.closeWS = this.binance.ws.ticker('ADAEUR', ticker => {\n      console.log(ticker);\n      this.setState((state) => ({\n        data: [...state.data, ticker]\n      }));\n    });\n    this.lineSeries = null;\n  }\n\n  componentDidMount() {\n    const chart = createChart(this.ref.current, { width: 400, height: 300 });\n    this.lineSeries = chart.addLineSeries();\n    this.lineSeries.setData([\n      { time: '2019-04-11', value: 80.01 },\n      { time: '2019-04-12', value: 96.63 },\n      { time: '2019-04-13', value: 76.64 },\n      { time: '2019-04-14', value: 81.89 },\n      { time: '2019-04-15', value: 74.43 },\n      { time: '2019-04-16', value: 80.01 },\n      { time: '2019-04-17', value: 96.63 },\n      { time: '2019-04-18', value: 76.64 },\n      { time: '2019-04-19', value: 81.89 },\n      { time: '2019-04-20', value: 74.43 },\n    ]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state !== prevState && this.lineSeries != null) {\n      let lineData = []\n      for(const key in this.state.data) {\n        const data = this.state.data[key];\n        lineData.push({ time: data.eventTime / 1000, value: parseFloat(data.curDayClose) })\n      }\n      this.lineSeries.setData(lineData);\n    }\n  }\n\n  componentWillUnmount() {\n    this.closeWS();\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={this.ref} />\n      </>\n    );\n  }\n}\n\n//export default Chart;\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.binance = null;\n    this.state = {apiKeyValue: \"\", apiSecretValue: \"\"};\n    this.handleChangeAPIKey = this.handleChangeAPIKey.bind(this);\n    this.handleChangeAPISecret = this.handleChangeAPISecret.bind(this);\n    this.handleRun = this.handleRun.bind(this);\n  }\n\n  handleChangeAPIKey(event) {\n    this.setState({apiKeyValue: event.target.value})\n  }\n\n  handleChangeAPISecret(event) {\n    this.setState({apiSecretValue: event.target.value})\n  }\n\n  handleRun() {\n    const client = Binance();\n    client.ws.candles('ADAEUR', '1m', candle => {\n      console.log(candle)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input name=\"APIKEY\" type=\"text\" value={this.state.apiKeyValue} onChange={this.handleChangeAPIKey}/>\n        <input name=\"APISECRET\" type=\"text\" value={this.state.apiSecretValue} onChange={this.handleChangeAPISecret}/>\n        <button onClick={this.handleRun}>Run</button>\n\n        <TradingViewWidget\n          width={980}\n          height={610}\n          symbol=\"KRAKEN:ADAEUR\"\n          interval=\"D\"\n          timezone=\"Europe/Madrid\"\n          style=\"1\"\n          locale=\"es\"\n          toolbar_bg=\"#f1f3f6\"\n          enable_publishing={false}\n          withdateranges={true}\n          hide_side_toolbar={false}\n          allow_symbol_change={true}\n          theme={Themes.DARK}\n        />\n\n        <Chart/>\n\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}