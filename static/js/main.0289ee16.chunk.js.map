{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Chart","props","convertTickerData","bind","convertCandleToTickerData","ref","React","createRef","state","candleData","lineData","smaData","ticker","time","eventTime","value","curDayClose","this","sma","nextValue","parseFloat","candle","startTime","openTime","close","dataConverter","data","setState","dict","key","binance","Binance","SMA","period","values","candles","symbol","then","newState","Object","assign","convertCandleData","closeWS","ws","getStateUpdater","chart","createChart","current","width","height","localization","locale","timeScale","timeVisible","candlestickSeries","addCandlestickSeries","tickerLineSeries","addLineSeries","lineWidth","crosshairMarkerRadius","smaLineSeries","title","color","options","priceFormat","precision","minMove","applyOptions","_prevProps","prevState","setData","Component","App","apiKeyValue","apiSecretValue","handleChangeAPIKey","handleChangeAPISecret","handleRun","event","target","className","name","type","onChange","onClick","interval","timezone","style","toolbar_bg","enable_publishing","withdateranges","hide_side_toolbar","allow_symbol_change","theme","Themes","DARK","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0289ee16.chunk.js","sourcesContent":["//import React, { useEffect, useState } from 'react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { createChart } from 'lightweight-charts';\r\nimport TradingViewWidget, { Themes } from 'react-tradingview-widget';\r\nimport Binance from 'binance-api-node';\r\nimport { SMA } from 'technicalindicators';\r\nimport './App.css';\r\n\r\n/*function Chart() {\r\n  const ref = React.useRef();\r\n  const [data, setData] = useState([]);\r\n  const binance = Binance();\r\n  const closeWS = binance.ws.candles('ADAEUR', '1m', candle => {\r\n    console.log(candle);\r\n    setData(data.concat(candle));\r\n  });\r\n\r\n  useEffect(() => {\r\n    const chart = createChart(ref.current, { width: 400, height: 300 });\r\n    const lineSeries = chart.addLineSeries();\r\n    lineSeries.setData([\r\n      { time: '2019-04-11', value: 80.01 },\r\n      { time: '2019-04-12', value: 96.63 },\r\n      { time: '2019-04-13', value: 76.64 },\r\n      { time: '2019-04-14', value: 81.89 },\r\n      { time: '2019-04-15', value: 74.43 },\r\n      { time: '2019-04-16', value: 80.01 },\r\n      { time: '2019-04-17', value: 96.63 },\r\n      { time: '2019-04-18', value: 76.64 },\r\n      { time: '2019-04-19', value: 81.89 },\r\n      { time: '2019-04-20', value: 74.43 },\r\n    ]);\r\n    return closeWS;   // devolvemos funcion de saneamiento\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <div ref={ref} />\r\n    </>\r\n  );\r\n}*/\r\n\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.convertTickerData = this.convertTickerData.bind(this);\r\n    this.convertCandleToTickerData = this.convertCandleToTickerData.bind(this);\r\n    this.ref = React.createRef();\r\n    this.state = {\r\n      candleData: [],\r\n      lineData: [],\r\n      smaData: []\r\n    }\r\n  }\r\n\r\n  convertTickerData(ticker) {\r\n    return {\r\n      lineData: { time: ticker.eventTime / 1000, value: ticker.curDayClose },\r\n      smaData: { time: ticker.eventTime / 1000, value: this.sma.nextValue(parseFloat(ticker.curDayClose)) }\r\n    }\r\n  }\r\n\r\n  convertCandleData(candle) {\r\n    candle.time = (candle.startTime || candle.openTime) / 1000;\r\n    return {\r\n      //candleData: { time: candle.startTime / 1000, open: candle.open, high: candle.high, low: candle.low, close: candle.close }\r\n      candleData: candle\r\n    }\r\n  }\r\n\r\n  convertCandleToTickerData(candle) {\r\n    return this.convertTickerData({\r\n      eventTime: candle.openTime,\r\n      curDayClose: candle.close\r\n    });\r\n  }\r\n\r\n  getStateUpdater(dataConverter) {\r\n    return data => {\r\n      this.setState(state => {\r\n        const dict = dataConverter(data);\r\n        for(const key in dict)\r\n          dict[key] = [...state[key], dict[key]];\r\n        return dict;\r\n      });\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.binance = Binance();\r\n    this.sma = new SMA({period: 50, values: []});\r\n    this.binance.candles({ symbol: this.props.symbol }).then(data => {\r\n      let newState = Object.assign({}, this.state);\r\n      for(const key in data) {\r\n        const dict = Object.assign({},\r\n          this.convertCandleToTickerData(data[key]),\r\n          this.convertCandleData(data[key])\r\n        );\r\n        for(const key in dict)\r\n          newState[key] = [...newState[key], dict[key]];\r\n      }\r\n      this.setState(newState);\r\n    });\r\n    this.closeWS = [\r\n      this.binance.ws.ticker(this.props.symbol, this.getStateUpdater(this.convertTickerData)),\r\n      this.binance.ws.candles(this.props.symbol,'1m', this.getStateUpdater(this.convertCandleData))\r\n    ];\r\n    this.chart = createChart(this.ref.current, {\r\n      width: 600,\r\n      height: 400,\r\n      localization: {\r\n        locale: 'es-ES',\r\n        //dateFormat: 'dd/MM/yy',\r\n        /*timeFormatter: businessDayOrTimestamp => {\r\n          return businessDayOrTimestamp;\r\n        },*/\r\n      },\r\n      timeScale: {\r\n        timeVisible: true,\r\n      },\r\n    });\r\n    // TODO: fix price scale for all the series\r\n    // TODO: unify X axis scale\r\n    this.candlestickSeries = this.chart.addCandlestickSeries();\r\n    this.tickerLineSeries = this.chart.addLineSeries({\r\n      lineWidth: 1,\r\n      crosshairMarkerRadius: 3\r\n    });\r\n    this.smaLineSeries = this.chart.addLineSeries({\r\n      lineWidth: 1,\r\n      crosshairMarkerRadius: 3,\r\n      title: 'SMA 50',\r\n      color: '#219600',\r\n      //priceScaleId: 'left'\r\n    });\r\n    const options = {\r\n      priceFormat: {\r\n        precision: 6,\r\n        minMove: 0.000001,\r\n      },\r\n    };\r\n    this.tickerLineSeries.applyOptions(options);\r\n    this.smaLineSeries.applyOptions(options);\r\n    this.candlestickSeries.applyOptions(options);\r\n  }\r\n\r\n  componentDidUpdate(_prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      this.tickerLineSeries.setData(this.state.lineData);\r\n      this.candlestickSeries.setData(this.state.candleData);\r\n      this.smaLineSeries.setData(this.state.smaData);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    for(const key in this.closeWS)\r\n      this.closeWS[key]();\r\n    this.closeWS = [];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div ref={this.ref} />\r\n      </>\r\n    );\r\n  }\r\n}\r\nChart.propTypes = {\r\n  symbol: PropTypes.string.isRequired\r\n}\r\n//export default Chart;\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.binance = null;\r\n    this.state = {apiKeyValue: \"\", apiSecretValue: \"\"};\r\n    this.handleChangeAPIKey = this.handleChangeAPIKey.bind(this);\r\n    this.handleChangeAPISecret = this.handleChangeAPISecret.bind(this);\r\n    this.handleRun = this.handleRun.bind(this);\r\n  }\r\n\r\n  handleChangeAPIKey(event) {\r\n    this.setState({apiKeyValue: event.target.value})\r\n  }\r\n\r\n  handleChangeAPISecret(event) {\r\n    this.setState({apiSecretValue: event.target.value})\r\n  }\r\n\r\n  handleRun() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <input name=\"APIKEY\" type=\"text\" value={this.state.apiKeyValue} onChange={this.handleChangeAPIKey}/>\r\n        <input name=\"APISECRET\" type=\"text\" value={this.state.apiSecretValue} onChange={this.handleChangeAPISecret}/>\r\n        <button onClick={this.handleRun}>Run</button>\r\n\r\n        <TradingViewWidget\r\n          width={980}\r\n          height={610}\r\n          symbol=\"KRAKEN:ADAEUR\"\r\n          interval=\"1\"\r\n          timezone=\"Europe/Madrid\"\r\n          style=\"1\"\r\n          locale=\"es\"\r\n          toolbar_bg=\"#f1f3f6\"\r\n          enable_publishing={false}\r\n          withdateranges={true}\r\n          hide_side_toolbar={false}\r\n          allow_symbol_change={true}\r\n          theme={Themes.DARK}\r\n        />\r\n\r\n        <Chart symbol='ADAEUR'/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}