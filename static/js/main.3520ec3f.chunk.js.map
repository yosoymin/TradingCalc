{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Chart","props","convertTickerData","bind","convertCandleData","convertCandleToTickerData","ref","React","createRef","state","candleData","lineData","smaData","timestamp","Date","getTimezoneOffset","localSeconds","ticker","localTime","this","convertToLocalTimeSeconds","eventTime","value","parseFloat","curDayClose","time","sma","nextValue","candle","startTime","openTime","close","dataConverter","data","setState","dict","key","binance","Binance","SMA","period","values","candles","symbol","interval","limit","then","newState","Object","assign","length","prevLineData","copyCandle","nextMilliseconds","convertToUTCMilliseconds","nextLineValue","diffStepValue","push","closeWS","ws","getStateUpdater","chart","createChart","current","width","height","localization","locale","timeScale","timeVisible","charts","addLineSeries","lineWidth","crosshairMarkerRadius","addCandlestickSeries","title","color","options","priceFormat","precision","minMove","chartName","applyOptions","_prevProps","_prevState","setData","Component","App","apiKeyValue","apiSecretValue","handleChangeAPIKey","handleChangeAPISecret","handleRun","event","target","className","name","type","onChange","onClick","timezone","style","toolbar_bg","enable_publishing","withdateranges","hide_side_toolbar","allow_symbol_change","theme","Themes","DARK","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3520ec3f.chunk.js","sourcesContent":["//import React, { useEffect, useState } from 'react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { createChart } from 'lightweight-charts';\r\nimport TradingViewWidget, { Themes } from 'react-tradingview-widget';\r\nimport Binance from 'binance-api-node';\r\nimport { SMA } from 'technicalindicators';\r\nimport './App.css';\r\n\r\n/*function Chart() {\r\n  const ref = React.useRef();\r\n  const [data, setData] = useState([]);\r\n  const binance = Binance();\r\n  const closeWS = binance.ws.candles('ADAEUR', '1m', candle => {\r\n    console.log(candle);\r\n    setData(data.concat(candle));\r\n  });\r\n\r\n  useEffect(() => {\r\n    const chart = createChart(ref.current, { width: 400, height: 300 });\r\n    const lineSeries = chart.addLineSeries();\r\n    lineSeries.setData([\r\n      { time: '2019-04-11', value: 80.01 },\r\n      { time: '2019-04-12', value: 96.63 },\r\n      { time: '2019-04-13', value: 76.64 },\r\n      { time: '2019-04-14', value: 81.89 },\r\n      { time: '2019-04-15', value: 74.43 },\r\n      { time: '2019-04-16', value: 80.01 },\r\n      { time: '2019-04-17', value: 96.63 },\r\n      { time: '2019-04-18', value: 76.64 },\r\n      { time: '2019-04-19', value: 81.89 },\r\n      { time: '2019-04-20', value: 74.43 },\r\n    ]);\r\n    return closeWS;   // devolvemos funcion de saneamiento\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <div ref={ref} />\r\n    </>\r\n  );\r\n}*/\r\n\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.convertTickerData = this.convertTickerData.bind(this);\r\n    this.convertCandleData = this.convertCandleData.bind(this);\r\n    this.convertCandleToTickerData = this.convertCandleToTickerData.bind(this);\r\n    this.ref = React.createRef();\r\n    this.state = {\r\n      candleData: [],\r\n      lineData: [],\r\n      smaData: []\r\n    }\r\n  }\r\n\r\n  convertToLocalTimeSeconds(timestamp) {\r\n    return timestamp / 1000 - (new Date().getTimezoneOffset() * 60);\r\n  }\r\n\r\n  convertToUTCMilliseconds(localSeconds) {\r\n    return (localSeconds + (new Date().getTimezoneOffset() * 60)) * 1000;\r\n  }\r\n\r\n  convertTickerData(ticker) {\r\n    const localTime = this.convertToLocalTimeSeconds(ticker.eventTime);\r\n    const value = parseFloat(ticker.curDayClose);\r\n    return {\r\n      lineData: { time: localTime, value: value },\r\n      smaData: { time: localTime, value: this.sma.nextValue(value) }\r\n    }\r\n  }\r\n\r\n  convertCandleData(candle) {\r\n    candle.time = this.convertToLocalTimeSeconds(candle.startTime || candle.openTime);\r\n    return {\r\n      candleData: candle\r\n    }\r\n  }\r\n\r\n  convertCandleToTickerData(candle) {\r\n    return this.convertTickerData({\r\n      eventTime: candle.openTime,\r\n      curDayClose: candle.close // TODO: test candle.open\r\n    });\r\n  }\r\n\r\n  getStateUpdater(dataConverter) {\r\n    return data => {\r\n      this.setState(state => {\r\n        const dict = dataConverter(data);\r\n        for (const key in dict)\r\n          dict[key] = [...state[key], dict[key]];\r\n        return dict;\r\n      });\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.binance = Binance();\r\n    this.sma = new SMA({period: 600, values: []});\r\n    this.binance.candles({ symbol: this.props.symbol, interval: '1m', limit: 1000 }).then(candles => {\r\n      let newState = Object.assign({}, this.state);\r\n      for (const candle of candles) {\r\n        // Fill every second with interpolated data\r\n        if (newState.lineData.length > 0) {\r\n          const prevLineData = newState.lineData[newState.lineData.length - 1];\r\n          let copyCandle = Object.assign({}, candle);\r\n          const nextMilliseconds = copyCandle.openTime;\r\n          copyCandle.openTime = this.convertToUTCMilliseconds(prevLineData.time);\r\n          const nextLineValue = parseFloat(copyCandle.close);\r\n          copyCandle.close = prevLineData.value;\r\n          const diffStepValue = (nextLineValue - prevLineData.value) / 60;\r\n          while (copyCandle.openTime < nextMilliseconds) {\r\n            const dict = this.convertCandleToTickerData(copyCandle);\r\n            for (const key in dict)\r\n              newState[key].push(dict[key]);\r\n            copyCandle.openTime += 1000;\r\n            copyCandle.close += diffStepValue;\r\n          }\r\n        }\r\n\r\n        const dict = Object.assign({},\r\n          this.convertCandleToTickerData(candle),\r\n          this.convertCandleData(candle)\r\n        );\r\n        for (const key in dict)\r\n          newState[key].push(dict[key]);\r\n      }\r\n      this.setState(newState);\r\n    });\r\n    this.closeWS = [\r\n      this.binance.ws.ticker(this.props.symbol, this.getStateUpdater(this.convertTickerData)),\r\n      this.binance.ws.candles(this.props.symbol,'1m', this.getStateUpdater(this.convertCandleData))\r\n    ];\r\n    this.chart = createChart(this.ref.current, {\r\n      width: 600,\r\n      height: 400,\r\n      localization: {\r\n        locale: 'es-ES',\r\n        //dateFormat: 'dd/MM/yy',\r\n        /*timeFormatter: businessDayOrTimestamp => {\r\n          return businessDayOrTimestamp;\r\n        },*/\r\n      },\r\n      timeScale: {\r\n        timeVisible: true,\r\n      },\r\n    });\r\n    this.charts = {\r\n      lineData: this.chart.addLineSeries({\r\n        lineWidth: 1,\r\n        crosshairMarkerRadius: 3\r\n      }),\r\n      candleData: this.chart.addCandlestickSeries(),\r\n      smaData: this.chart.addLineSeries({\r\n        lineWidth: 1,\r\n        crosshairMarkerRadius: 3,\r\n        title: 'SMA 50',\r\n        color: '#219600',\r\n        //priceScaleId: 'left'\r\n      })\r\n    };\r\n    const options = {\r\n      priceFormat: {\r\n        precision: 6,\r\n        minMove: 0.000001,\r\n      },\r\n    };\r\n    for (const chartName in this.charts)\r\n      this.charts[chartName].applyOptions(options);\r\n  }\r\n\r\n  componentDidUpdate(_prevProps, _prevState) {\r\n    if (this.state !== _prevState) {\r\n      for (const key in this.state) {\r\n        if (this.state[key] !== _prevState[key])\r\n          this.charts[key].setData(this.state[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    for (const closeWS of this.closeWS)\r\n      closeWS();\r\n    this.closeWS = [];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div ref={this.ref} />\r\n      </>\r\n    );\r\n  }\r\n}\r\nChart.propTypes = {\r\n  symbol: PropTypes.string.isRequired\r\n}\r\n//export default Chart;\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.binance = null;\r\n    this.state = {apiKeyValue: \"\", apiSecretValue: \"\"};\r\n    this.handleChangeAPIKey = this.handleChangeAPIKey.bind(this);\r\n    this.handleChangeAPISecret = this.handleChangeAPISecret.bind(this);\r\n    this.handleRun = this.handleRun.bind(this);\r\n  }\r\n\r\n  handleChangeAPIKey(event) {\r\n    this.setState({apiKeyValue: event.target.value})\r\n  }\r\n\r\n  handleChangeAPISecret(event) {\r\n    this.setState({apiSecretValue: event.target.value})\r\n  }\r\n\r\n  handleRun() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <input name=\"APIKEY\" type=\"text\" value={this.state.apiKeyValue} onChange={this.handleChangeAPIKey}/>\r\n        <input name=\"APISECRET\" type=\"text\" value={this.state.apiSecretValue} onChange={this.handleChangeAPISecret}/>\r\n        <button onClick={this.handleRun}>Run</button>\r\n\r\n        <TradingViewWidget\r\n          width={980}\r\n          height={610}\r\n          symbol=\"KRAKEN:ADAEUR\"\r\n          interval=\"1\"\r\n          timezone=\"Europe/Madrid\"\r\n          style=\"1\"\r\n          locale=\"es\"\r\n          toolbar_bg=\"#f1f3f6\"\r\n          enable_publishing={false}\r\n          withdateranges={true}\r\n          hide_side_toolbar={false}\r\n          allow_symbol_change={true}\r\n          theme={Themes.DARK}\r\n        />\r\n\r\n        <Chart symbol='ADAEUR'/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}